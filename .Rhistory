getwd()
location <- read.csv("location.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
getwd()
#call the package from your library
library(geosphere)
#read in a file with latitude and longitude for your points of interest
location <- read.csv("location.csv")
#One method for determining the distance between two points is using the Haversine method. We'll use the distm function in the geosphere package and then specify the Haversine method
#first we need to get a dataframe that is just the latitude and longitude of our sites
#for this example, those are columns 4 and 5
loc <- location[4:5]
#if we want to do this with tidyverse, we would use:
loc2 <- location %>% select(c(better_lat,better_long))
distances<-as.data.frame(distm(loc,fun=distHaversine))
View(loc)
View(loc2)
distances
weather <- read.csv("Augusta_weather_data.csv")
unique(weather$STATION)
str(weather)
#let's rename some of these column names
rename(weather,precipitation = PRCP)
#let's rename some of these column names
weather <- weather %>% rename(precipitation = PRCP,
max_temp = TMAX,
min_temp = TMIN,
average_temp = TAVG)
#let's look at which of the weather stations has the most observations each of these weather variables
weather %>% count(STATION,precipitation,average_temp)
#let's look at which of the weather stations has the most observations each of these weather variables
weather %>% count(STATION,precipitation)
#let's look at which of the weather stations has the most observations each of these weather variables
weather %>% group_by(STATION) count(precipitation)
#let's look at which of the weather stations has the most observations each of these weather variables
weather %>% group_by(STATION) %>% count(precipitation)
#let's look at which of the weather stations has the most observations each of these weather variables
weather %>% group_by(STATION) %>% add_count(precipitation)
#let's look at which of the weather stations has the most observations each of these weather variables
weather %>% group_by(STATION) %>%
select(precipitation) %>%
group_by(precip_obs = n())
group_by(STATION) %>%
group_by(precip_obs = n())
#let's look at which of the weather stations has the most observations each of these weather variables
weather %>% filter(!is.na(precipitation)) %>%
group_by(STATION) %>%
group_by(precip_obs = n())
#let's look at which of the weather stations has the most observations each of these weather variables
weather %>% filter(!is.na(precipitation)) %>%
group_by(STATION) %>%
summarize(precip_obs = n())
weather %>% filter(!is.na(average_temp)) %>%
group_by(STATION) %>%
summarize(precip_obs = n())
weather %>% filter(!is.na(max_temp)) %>%
group_by(STATION) %>%
summarize(precip_obs = n())
#filter the data and summarize precipitation and max temperature data
weather_summary <- weather %>% filter(STATION=="USW00003820"|STATION=="USW00013837") %>%
group_by(DATE) %>%
summarize(mean_precip = mean(precipitation),
mean_maxT = mean(max_temp))
str(weather_summary)
#let's make sure our date is in date format
weather_summary$DATE <- mdy(weather_summary$DATE)
#let's look at precipitation over time
ggplot(weather_summary,aes(x=DATE,y=mean_precipitation)) +
geom_point() +
geom_line() +
theme_classic()
#let's look at precipitation over time
ggplot(weather_summary,aes(x=DATE,y=mean_precip)) +
geom_point() +
geom_line() +
theme_classic()
#that's hard to interpret. Maybe it would be easier to look at with each year separated
weather_summary %<>%
mutate(year=year(DATE),
month_day=format(DATE,"%m-%d"))
library(magrittr)
#that's hard to interpret. Maybe it would be easier to look at with each year separated
weather_summary %<>%
mutate(year=year(DATE),
month_day=format(DATE,"%m-%d"))
View(weather_summary)
#that's hard to interpret. Maybe it would be easier to look at with each year separated
weather_summary %>%
mutate(year=year(DATE),
month_day=format(DATE,"%m-%d")) %>%
ggplot(aes(x=month_day,y=mean_precip)) +
geom_point() +
geom_line() +
facet_wrap(~year)
#that's hard to interpret. Maybe it would be easier to look at with each year separated
weather_summary %>%
mutate(year=year(DATE),
month_day=format(DATE,"%m-%d")) %>%
ggplot(aes(x=month_day,y=mean_precip)) +
geom_point() +
geom_line() +
facet_wrap(~year)+
theme_classic()
#that's hard to interpret. Maybe it would be easier to look at with each year separated
weather_summary %>%
mutate(year=year(DATE),
month_day=format(DATE,"%m-%d")) %>%
ggplot(aes(x=month_day,y=mean_precip,group=year)) +
geom_point() +
geom_line() +
facet_wrap(~year)+
theme_classic()
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 %>%
mutate(month_year = format(DATE,"%m-%Y")) %>%
group_by(month_year) %<%
summarize(mean_precip = mean(precipitation),
mean_maxT = mean(max_temp))
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 %>%
mutate(month_year = format(DATE,"%m-%Y")) %>%
group_by(month_year) %>%
summarize(mean_precip = mean(precipitation),
mean_maxT = mean(max_temp))
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 <- weather %>%
mutate(month_year = format(DATE,"%m-%Y")) %>%
group_by(month_year) %>%
summarize(mean_precip = mean(precipitation),
mean_maxT = mean(max_temp))
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 <- weather %>%
mutate(month_year = format(DATE,"%m-%y")) %>%
group_by(month_year) %>%
summarize(mean_precip = mean(precipitation),
mean_maxT = mean(max_temp))
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 <- weather %>%
mutate(month_year = format(DATE,"%Y-%m")) %>%
group_by(month_year) %>%
summarize(mean_precip = mean(precipitation),
mean_maxT = mean(max_temp))
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 <- weather %>%
mutate(month_year = format(DATE,"%Y-%m"))
#first, let's make sure our date is in date format
weather$DATE <- mdy(weather$DATE)
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 <- weather %>%
mutate(month_year = format(DATE,"%Y-%m")) %>%
group_by(month_year) %>%
summarize(mean_precip = mean(precipitation),
mean_maxT = mean(max_temp))
View(weather_summary2)
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 <- weather %>%
mutate(month_year = format(DATE,"%Y-%m")) %>%
group_by(month_year) %>%
summarize(mean_precip = mean(precipitation,na.rm=T),
mean_maxT = mean(max_temp,na.rm=T))
View(weather_summary2)
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 <- weather %>%
mutate(month_year = format(DATE,"%Y-%m")) %>%
group_by(month_year) %>%
summarize(total_precip = sum(precipitation),
mean_maxT = mean(max_temp,na.rm=T))
ggplot(weather_summary2,aes(x=DATE,y=total_precip)) +
geom_point() +
geom_line() +
theme_classic()
ggplot(weather_summary2,aes(x=month_year,y=total_precip)) +
geom_point() +
geom_line() +
theme_classic()
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 <- weather %>%
mutate(month_year = format(DATE,"%Y-%m")) %>%
group_by(month_year) %>%
summarize(total_precip = sum(precipitation),
mean_maxT = mean(max_temp,na.rm=T))
ggplot(weather_summary2,aes(x=month_year,y=total_precip)) +
geom_point() +
geom_line() +
theme_classic()
View(weather_summary2)
View(weather)
#that's hard to interpret. Maybe it would be easier to look at with summaries for each month
#first we'll need a column with the month and year and then use that to group by and summarize like we did before
weather_summary2 <- weather %>%
mutate(month_year = format(DATE,"%Y-%m")) %>%
group_by(month_year) %>%
summarize(total_precip = sum(precipitation,na.rm=T),
mean_maxT = mean(max_temp,na.rm=T))
ggplot(weather_summary2,aes(x=month_year,y=total_precip)) +
geom_point() +
geom_line() +
theme_classic()
#it's hard to read the x-axis, so we can use another line in our ggplot code to rotate the text
ggplot(weather_summary2,aes(x=month_year,y=total_precip)) +
geom_point() +
geom_line() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(weather_summary2,aes(x=month_year,y=total_precip)) +
geom_point() +
theme_classic()
#it's hard to read the x-axis, so we can use another line in our ggplot code to rotate the text
ggplot(weather_summary2,aes(x=month_year,y=total_precip)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#we can use the same code but replace total_precip with mean_temp to look at average temperature
ggplot(weather_summary2,aes(x=month_year,y=mean_temp)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#we can use the same code but replace total_precip with mean_maxT to look at average temperature
ggplot(weather_summary2,aes(x=month_year,y=mean_maxT)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
---
title: "A cheat sheet to 'tidy' data processing for ECOL 4000/6000"
